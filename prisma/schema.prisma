generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserFavourite {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  articles Article[]
  sites    Site[]
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @db.ObjectId
}

model Article {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  source          Site           @relation(fields: [siteId], references: [id])
  title           String
  url             String
  imgUrl          String
  siteId          String         @db.ObjectId
  UserFavourite   UserFavourite? @relation(fields: [userFavouriteId], references: [id])
  userFavouriteId String?        @db.ObjectId
  createdAt       DateTime       @default(now())
}

model Site {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  url             String
  Article         Article[]
  UserFavourite   UserFavourite? @relation(fields: [userFavouriteId], references: [id])
  userFavouriteId String?        @db.ObjectId
  createdAt       DateTime       @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserFavourite UserFavourite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  @@unique([identifier, token])
}
